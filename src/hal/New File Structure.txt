x86 HAL
------------------------------------------------------------------------
	amd64 - GDT, IDT, Paging (64 bit)
	apic - Local APIC, I/O APIC, APIC Timer
	common - GDT*, IDT*, Exceptions, IRQs, Syscalls, Paging**, I/O
	mp - AP Startup
	pae
	up - 8259A PIC***, PIT****

*Can be overridden by 64 bit GDT and IDT
**Can be overridden by PAE or 64 bit paging
***Can be overriden by APIC
****Can be overriden by APIC Timer

Motherboard drivers
========================================================================
generic
	acpi - ACPI
	legacy - APM, MP Specification
native
	<Each motherboard driver goes here>

32 bit options
========================================================================
Uniprocessor Machine with no APIC, or PAE
	common, up
Uniprocessor Machine with APIC but no PAE
	common, up, apic
Uniprocessor Machine with PAE but no APIC
	common, up, pae
Uniprocessor Machine with APIC and PAE
	common, up, apic, pae


Multiprocessor Machine with no PAE
	common, mp, apic
Multiprocessor Machine with PAE
	common, mp, apic, pae

64 bit options
========================================================================
Machine
	common, amd64, mp, acpi, apic

HAL selection (32 bit)
========================================================================
bool pae, apic;

/* Use CPUID to detect PAE */
if (CPU supports PAE)
{
	pae = true;
}

/* Try to find multiple processors or APICs with ACPI */
rsdp_t *rsdp = acpi_find_rsdp();
if (rsdp)
{
	<Parse the MADT>
	if (There are multiple processors and APICs)
	{
		goto mp;
	}
	else if (There is an APIC, but not multiple processors)
	{
		apic = true;
		goto up;
	}
}

/* Try to find multiple processors or APICs with the MP tables */
mp_table_ptr_t *mp_table_ptr = mp_find_table_ptr();
<Parse the MP tables>
if (There are multiple processors and APICs)
{
	goto mp;
}
else if (There is an APIC, but not multiple processors)
{
	apic = true;
	goto up;
}

/* If there's no ACPI or MP tables, use CPUID to detect a Local APIC */
<Detect a Local APIC>
if (There is a Local APIC)
{
	apic = true;
}

/* Uniprocessor HAL */
up:
	if (apic && pae)
	{
		<Load the Uniprocessor APIC and PAE HAL>
	}
	else if (apic)
	{
		<Load the Uniprocessor APIC HAL>
	}
	else if (pae)
	{
		<Load the Uniprocessor PAE HAL>
	}
	else
	{
		<Load the Uniprocessor HAL>
	}

	return;

mp:
	if (pae)
	{
		
		<Load the Multiprocessor PAE HAL>
	}
	else
	{
		<Load the Multiprocessor HAL>
	}

	return;

HAL selection (64 bit)
========================================================================
<Load the 64 bit machine HAL, and make sure to read the RSDP>

Motherboard driver selection
========================================================================
/* Try to load a native motherboard driver */
if (There is a driver for the current motherboard)
{
	<Load the native motherboard driver>
}
/* Try to load a generic motherboard driver */
else
{
	/* If ACPI is present, load it (rsdp is in the HAL selection code) */
	if (rsdp)
	{
		<Load ACPI motherboard driver>
	}
	/* Otherwise, load the legacy motherboard driver (APM, MP Specification) */
	else
	{
		<Load legacy motherboard driver>
	}
}

ARM HAL
------------------------------------------------------------------------
	bcm2835 - Timer
	common - Exceptions, IRQs, Syscalls, Paging, I/O