/* Base Object class */
class Object
{
public:
	/* Destructor */
	virtual ~Object() = 0;

	/* Increment and decrement the objects's reference count */
	virtual void ref();
	virtual void unref();

	/* Query other interfaces */
	virtual Object *query_interface(int iid) = 0;
private:
	/* Reference count */
	atomic_t refcount;
};

/* Increment an Object's reference count */
void Object::ref()
{
	atomic_inc(&this->refcount);
}

/* Decrement an Object's reference count */
void Object::unref()
{
	/* Try to decrement the reference count atomically */
	atomic_t i = this->refcount;
	while(1)
	{
		if (atomic_cmpxchg(&this->refcount, i, i - 1) == i) break;
		i = this->refcount;
	}

	/* Delete object if we hit 0 */
	if (i == 1)
	{
		delete this;
	}
}
